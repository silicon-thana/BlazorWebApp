@page "/account/delete"
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data
@using System.ComponentModel.DataAnnotations
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager


<PageTitle>Delete Account</PageTitle>

<section class="account" id="account-delete">
    <div class="container">
        <h2>Delete Account</h2>
        <EditForm Model="DeleteAccount" OnValidSubmit="DeleteAccountAsync" FormName="DeleteAccount" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="content">
                <p>When you delete your account, your public profile will be deactivated immediately. If you change your mind before the 14 days are up, sign in with your email and password, and we’ll send you a link to reactivate your account.</p>
                <div id="form-terms" class="checkbox">
                    <div class="checkbox-group">
                        <InputCheckbox @bind-Value="DeleteAccount.ConfirmDelete" />
                        <label>Yes, I want to delete my account.</label>
                    </div>
                    <ValidationMessage For="() => DeleteAccount.ConfirmDelete" class="text-danger" />
                </div>
                <div class="form-buttons">
                    <button class="btn-danger" type="submit">Delete</button>
                </div>
            </div>
        </EditForm>
    </div>
</section>

@code {
    private ApplicationUser user = default!;
    private DeleteAccountModel DeleteAccount { get; set; } = new ();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.GetUserAsync(HttpContext.User) ?? new ApplicationUser();
        DeleteAccount = new DeleteAccountModel(); // Ensure the model is initialized
    }

    private async Task DeleteAccountAsync()
    {
        try
        {
            Console.WriteLine($"DeleteAccount.ConfirmDelete: {DeleteAccount.ConfirmDelete}");

            if (DeleteAccount.ConfirmDelete)
            {
                var result = await UserManager.DeleteAsync(user);

                if (result.Succeeded)
                {
                    await SignInManager.SignOutAsync();
                    NavigationManager.NavigateTo("/"); // Redirect to home page or a confirmation page
                }
                else
                {
                    foreach (var error in result.Errors)
                    {
                        // Handle errors (e.g., add error messages to a list to display in the UI)
                        Console.WriteLine($"Error: {error.Description}");
                    }
                }
            }
            else
            {
                Console.WriteLine("DeleteAccount.ConfirmDelete is false.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
    }

    public class DeleteAccountModel
    {
        [Required]
        [Display(Name = "Confirm Delete")]
        public bool ConfirmDelete { get; set; }
    }
}