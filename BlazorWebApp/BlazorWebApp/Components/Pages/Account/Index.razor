@page "/Account/Details"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext context

@rendermode InteractiveServer

<PageTitle>Profile</PageTitle>
<section id="account-details" class="account">
    <div class="container">
        <ManageNavMenu User="user"/>
        <div class="details">
            <section class="basic-info">
                <EditForm Model="Input" FormName="userInfo" OnValidSubmit="OnValidSubmitAsync">
                    <DataAnnotationsValidator />
                    <h2>Account Info</h2>
                    <h5>Basic Info</h5>
                    <div class="content">
                        <div id="form-firstname" class="input-group">
                            <InputText @bind-Value="Input.FirstName" placeholder="Enter your first name" />
                            <label for="FirstName">FirstName</label>
                            <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                        </div>
                        <div id="form-lastname" class="input-group">
                            <InputText @bind-Value="Input.LastName" placeholder="Enter your last name" />
                            <label for="LastName">Lastname</label>
                            <ValidationMessage For="() => Input.LastName" class="text-danger" />
                        </div>
                        <div id="form-email" class="input-group">
                            <InputText @bind-Value="Input.Email" placeholder="Enter your email" />
                            <label for="Email">Email</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <div id="form-phone" class="input-group">
                            <InputText @bind-Value="Input.PhoneNumber" placeholder="Enter your phone number" />
                            <label for="PhoneNumber">PhoneNumber</label>
                            <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                        </div>
                        <div id="form-bio" class="input-group">
                            <InputTextArea @bind-Value="Input.Biography" placeholder="Add a short bio..." />
                            <label for="Biography">Biography</label>
                            <ValidationMessage For="() => Input.Biography" class="text-danger" />
                        </div>
                        <div class="form-buttons">
                            <button class="btn-gray" type="reset">Cancel</button>
                            <button class="btn-theme" type="submit">Save Changes</button>
                        </div>
                    </div>
                </EditForm>
                @StatusMessage
            </section>
            <hr />
            <section class="adress-info">
                <EditForm Model="AddressInput" FormName="addressinfo" OnValidSubmit="OnValidSubmitAddressAsync">
                    <DataAnnotationsValidator />
                    <h5>Address</h5>
                    <div class="content">
                        <div id="form-addressline-1" class="input-group">
                            <InputText @bind-Value="AddressInput.AddressLine1" placeholder="Enter address line 1" />
                            <label for="AddressLine1">Address Line 1</label>
                            <ValidationMessage For="() => AddressInput.AddressLine1" class="text-danger" />
                        </div>
                        <div id="form-addressline-2" class="input-group">
                            <InputText @bind-Value="AddressInput.AddressLine2" placeholder="Enter address line 2 (optional)" />
                            <label for="AddressLine2">Address Line 2</label>
                            <ValidationMessage For="() => AddressInput.AddressLine2" class="text-danger" />
                        </div>
                        <div id="form-postalcode" class="input-group">
                            <InputText @bind-Value="AddressInput.PostalCode" placeholder="Enter postal code" />
                            <label for="PostalCode">Postal Code</label>
                            <ValidationMessage For="() => AddressInput.PostalCode" class="text-danger" />
                        </div>
                        <div id="form-city" class="input-group">
                            <InputText @bind-Value="AddressInput.City" placeholder="Enter city" />
                            <label for="City">City</label>
                            <ValidationMessage For="() => AddressInput.City" class="text-danger" />
                        </div>
                        <div class="form-buttons">
                            <button class="btn-gray" type="reset">Cancel</button>
                            <button class="btn-theme" type="submit">Save Changes</button>
                        </div>
                    </div>
                </EditForm>
            </section>
        </div>
    </div>
</section>

@code {
    private ApplicationUser? user;
    private string? returnUrl;

    [Parameter]
    public string? StatusMessage { get; set; }

    private InputModel Input { get; set; } = new();
    private AddressInputModel AddressInput { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsync();
    }

    private async Task LoadUserAsync()
    {
        try
        {
            returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.LocationChanged += OnlocationChanged;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userIdentity = authState.User;

            if (userIdentity.Identity?.IsAuthenticated == true)
            {
                var userId = UserManager.GetUserId(userIdentity);
                user = await UserManager.FindByIdAsync(userId!);

                if (user != null)
                {
                    Input = new InputModel
                        {
                            FirstName = user.FirstName,
                            LastName = user.LastName,
                            Email = user.Email,
                            PhoneNumber = user.PhoneNumber,
                            Biography = user.Biography
                        };

                    if (user.AddressId.HasValue)
                    {
                        var address = await context.Addresses.FirstOrDefaultAsync(a => a.Id == user.AddressId.Value);
                        if (address != null)
                        {
                            AddressInput = new AddressInputModel
                                {
                                    AddressLine1 = address.AddressLine_1 ?? string.Empty,
                                    AddressLine2 = address.AddressLine_2 ?? string.Empty,
                                    PostalCode = address.PostalCode ?? string.Empty,
                                    City = address.City ?? string.Empty
                                };
                        }
                    }
                }
            }
            else
            {
                NavigationManager.NavigateTo("/signin", true);
            }
        }
        catch (Exception ex)
        {
            StatusMessage = "An error occurred while loading user information.";
            Console.WriteLine($"Error in LoadUserAsync: {ex.Message}");
        }
    }

    private void OnlocationChanged(object? sender, LocationChangedEventArgs e)
    {
        returnUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnlocationChanged;
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            if (user != null)
            {
                user.FirstName = Input.FirstName!;
                user.LastName = Input.LastName!;
                user.Email = Input.Email;
                user.PhoneNumber = Input.PhoneNumber;
                user.Biography = Input.Biography;

                var result = await UserManager.UpdateAsync(user);
                if (result.Succeeded)
                {
                    StatusMessage = "Your profile has been updated.";
                    await LoadUserAsync(); // Reload user to reflect changes
                }
                else
                {
                    StatusMessage = "Unexpected error when trying to update profile.";
                    LogErrors(result);
                }
            }
        }
        catch (Exception ex)
        {
            StatusMessage = "An error occurred while updating profile.";
            Console.WriteLine($"Error in OnValidSubmitAsync: {ex.Message}");
        }
    }

    private async Task OnValidSubmitAddressAsync()
    {
        try
        {
            if (user != null)
            {
                if (user.Address == null)
                {
                    user.Address = new AddressEntity();
                }

                user.Address.AddressLine_1 = AddressInput.AddressLine1;
                user.Address.AddressLine_2 = AddressInput.AddressLine2;
                user.Address.PostalCode = AddressInput.PostalCode;
                user.Address.City = AddressInput.City;

                var result = await UserManager.UpdateAsync(user);
                if (result.Succeeded)
                {
                    StatusMessage = "Your address has been updated.";
                    await LoadUserAsync(); // Reload user to reflect changes
                }
                else
                {
                    StatusMessage = "Unexpected error when trying to update address.";
                    LogErrors(result);
                }
            }
        }
        catch (Exception ex)
        {
            StatusMessage = "An error occurred while updating address.";
            Console.WriteLine($"Error in OnValidSubmitAddressAsync: {ex.Message}");
        }
    }

    private void LogErrors(IdentityResult result)
    {
        foreach (var error in result.Errors)
        {
            Console.WriteLine($"Error: {error.Description}");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First Name")]
        public string? FirstName { get; set; }

        [Required]
        [Display(Name = "Last Name")]
        public string? LastName { get; set; }

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string? Email { get; set; }

        [Phone]
        [Display(Name = "Phone Number")]
        public string? PhoneNumber { get; set; }

        [Display(Name = "Biography")]
        public string? Biography { get; set; }
    }

    private sealed class AddressInputModel
    {
        [Required]
        [Display(Name = "Address Line 1")]
        public string? AddressLine1 { get; set; }

        [Display(Name = "Address Line 2")]
        public string? AddressLine2 { get; set; }

        [Required]
        [Display(Name = "Postal Code")]
        public string? PostalCode { get; set; }

        [Required]
        [Display(Name = "City")]
        public string? City { get; set; }
    }
}