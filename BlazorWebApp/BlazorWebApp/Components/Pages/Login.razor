@page "/signin"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<section id="signin">
    <div class="container">

        <div class="breadcrumb">
            <i class="fa-solid fa-house"></i>
            <NavLink ActiveClass="active" href="/" Match="NavLinkMatch.All">Home</NavLink>
            <i class="fa-solid fa-angles-right"></i>
            <NavLink ActiveClass="active" href="/signin" Match="NavLinkMatch.All">Sign In</NavLink>
        </div>

         <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h1>Welcome Back</h1>
            <p>Don't have an account yet? <a href="/signup" >Sign up here</a>.</p>
            <div class="content">

                @if (!string.IsNullOrEmpty(@StatusMessage))
                {
                    <div class="alert alert-danger">
                        @StatusMessage
                    </div>
                }
                <ValidationSummary class="text-danger" role="alert" />
                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                    <InputText @bind-Value="Input.Email" autocomplete="email" aria-required="true" placeholder="Enter your email address" />
                </div>
                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <InputText type="password" @bind-Value="Input.Password" autocomplete="current-password" aria-required="true" placeholder="********" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div id="form-remember" class="checkbox">
                    <div class="checkbox-group">
                        <label>
                            <InputCheckbox @bind-Value="Input.RememberMe" />
                            Remember me
                        </label>
                    </div>
                </div>
                <button id="form-submit" class="btn-theme" type="submit">Sign In</button>
                @* <button id="form-forgotpassword" class="btn" href="/forgot-password">Forgot your password?</button> *@
            </div>
        </EditForm>

        <div class="signin-social">
            <div>
                <h6>Or sign in with your social network</h6>
            </div>
            <div class="social-button">
                <button class="btn-gray">
                    <i class="fa-brands fa-google"></i>
                    Google
                </button>
                <button class="btn-gray">
                    <i class="fa-brands fa-facebook-f"></i>
                    Facebook
                </button>
            </div>
        </div>
    </div>
</section>

@code {
    [SupplyParameterFromQuery]
    private string? StatusMessage { get; set; }
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
        else
        {
            StatusMessage = "Invalid email or password.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
