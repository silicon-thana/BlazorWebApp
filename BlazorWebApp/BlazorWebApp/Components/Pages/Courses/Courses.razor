@page "/courses"
@using System.Text.Json.Serialization
@using System.Text.Json
@attribute [StreamRendering]
@inject HttpClient Http

<PageTitle>Courses</PageTitle>

<section class="courses" id="courses">
    <div class="container">

        <div class="header">
            <h1>Courses</h1>
            <form id="form-filter">
                 <select>
                     <option>All categories</option>
                 </select>
                 <div class="input-search-group">
                     <input id="searchQuery" name="searchQuery" placeholder="Search Courses"/>
                     <i class="fa-regular fa-search"></i>
                 </div>
            </form>
        </div>
        <div class="course-content">

            @if (courses == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var courses in courses)
                {
                    <div class="course">
                        @if (courses.IsBestseller)
                        {
                            <div class="best-seller">Best Seller</div>
                        }
                        <img class="course-img" src="@courses.ImageUri" />
                        <h5 class="course-title">@courses.Title</h5>
                        <div class="content">
                            <div class="course-author">by @courses.Authors</div>
                            @if (courses.Prices.Discount > 0)
                            {
                                <div class="course-prices">
                                    <div class="course-discount">$@courses.Prices.Discount</div>
                                    <div class="course-price-reduced">$@courses.Prices.Price</div>
                                </div>
                            }
                            else
                            {
                                <div class="course-prices">
                                    <div class="course-price">$@courses.Prices.Price</div>
                                </div>
                            }

                            <div class="course-info">
                                <div class="course-hour"><i class="fa-regular fa-clock"></i>@courses.Hours hours</div>
                                <div class="course-likes">
                                    <span>@courses.LikesInProcent%</span>
                                    <span>(@courses.Likes<span>K</span>)</span>
                                </div>
                            </div>


                        </div>


                    </div>
                }
            }

        </div>
    </div>
</section>

@code {
    private CourseModel[]? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery { Query = @"{ id isBestseller title authors {name} categories prices{price discount} hours likesinProcent likes}" };
        var response = await Http.PostAsJsonAsync("https://courseprovider-silicon-thanakorn.azurewebsites.net/api/graphql?code=4RxFYo9hYNDJci032j1-3fdqTX1P10sXX5vePjVDw0NcAzFu5KF_sQ%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            courses = result?.Data.GetProperty("getCourses").EnumerateArray()
                .Select(course => new CourseModel
                    {
                        Id = course.GetProperty("id").GetString(),
                        IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
                        ImageUri = course.GetProperty("imageUri").GetString(),
                        Title = course.GetProperty("title").GetString(),
                        Authors = course.GetProperty("authors").EnumerateArray().Select(a => new Author
                        {
                            Name = a.GetProperty("name").GetString()
                        }).ToList(),
                        Prices = new Prices
                        {
                            Currency = course.GetProperty("prices").GetProperty("currency").GetString(),
                            Price = course.GetProperty("prices").GetProperty("price").GetDecimal(),
                            Discount = course.GetProperty("prices").GetProperty("discount").GetDecimal()
                        },
                        Hours = course.GetProperty("hours").ToString(),
                        LikesInProcent = course.GetProperty("likesInProcent").GetString(),
                        Likes = course.GetProperty("likes").GetString()
                    })
                .ToList()
                .ToArray();
        }
    }


    private class CourseModel
    {
        public string? Id { get; set; }
        public string? ImageUri { get; set; }
        public string? ImageHeaderUri { get; set; }
        public bool IsBestseller { get; set; }
        public bool IsDigital { get; set; }
        public string[]? Categories { get; set; }
        public string? Title { get; set; }
        public string? Ingress { get; set; }
        public decimal StarRating { get; set; }
        public string? Reviews { get; set; }
        public string? LikesInProcent { get; set; }
        public string? Likes { get; set; }
        public string? Hours { get; set; }

        public virtual List<Author>? Authors { get; set; }
        public virtual Prices? Prices { get; set; }
        public virtual Content? Content { get; set; }
    }
    public class Author
    {
        public string? Name { get; set; }
        public string? AuthorImageUri { get; set; }
    }

    public class Content
    {
        public string? Description { get; set; }
        public string[]? Includes { get; set; }
        public string[]? Learn { get; set; }
        public virtual List<ProgramDetailItem>? ProgramDetails { get; set; }
    }

    public class Prices
    {
        public string? Currency { get; set; }
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
    }

    public class ProgramDetailItem
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
    }

    public class GraphQLQuery
    {
        public string Query { get; set; } = null!;
    }

    public class DynamicGraphQLResponse
    {
        [JsonPropertyName("data")]
        public JsonElement Data { get; set; }
    }

}
