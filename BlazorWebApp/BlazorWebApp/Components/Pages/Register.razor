@page "/signup"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorWebApp.Filters
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorWebApp.Data
@using System.Net.Http
@using System.Net.Http.Json


@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Sign Up</PageTitle>

<section id="signup">
    <div class="container">


        @if (!string.IsNullOrEmpty(@StatusMessage))
        {
            <div class="alert alert-danger">
                @StatusMessage
            </div>
        }


        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="signup" novalidate>
            <DataAnnotationsValidator/>

            <h1>Create Account</h1>
            <p>Already have an account? <a href="/signin">Sign in here</a>.</p>

            <div class="content">

                <div id="form-firstname" class="input-group">
                    <label>First Name</label>
                    <InputText @bind-Value="Input.FirstName" autocomplete="givenname" aria-required="true" placeholder="Enter your first name" />
                    <ValidationMessage For="() => Input.FirstName" />

                </div>

                <div id="form-lastname" class="input-group">
                    <label>Last Name</label>
                    <InputText @bind-Value="Input.LastName" autocomplete="surname" aria-required="true" placeholder="Enter your last name" />
                    <ValidationMessage For="() => Input.LastName" />
                </div>
                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <InputText type="email" @bind-Value="Input.Email" autocomplete="email" aria-required="true" placeholder="Enter your email address" />
                    <ValidationMessage For="() => Input.Email" />
                </div>
                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <InputText type="password" @bind-Value="Input.Password" autocomplete="password" aria-required="true" placeholder="********" />
                    <ValidationMessage For="() => Input.Password" />
                </div>
                <div id="form-confirmpassword" class="input-group">
                    <label>Confirm Password</label>
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" autocomplete="confirm" aria-required="true" placeholder="********" />
                    <ValidationMessage For="() => Input.ConfirmPassword" />
                </div>
                <div id="form-terms" class="checkbox">
                    <div class="checkbox-group">
                        <InputCheckbox @bind-Value="Input.TermsNCondition" autocomplete="terms" aria-required="true" />
                        <label>I agree to the <a href="">Terms</a> & <a href="">Conditions</a>.</label>
                    </div>
                    <ValidationMessage For="() => Input.TermsNCondition" />
                </div>
            </div>
            <button id="form-submit" class="btn-theme-s" type="submit">Sign Up</button>

        </EditForm>

    </div>
</section>


@* @code{
    [SupplyParameterFromQuery]
    private string? StatusMessage { get; set; }
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    [SupplyParameterFromForm]
    private SignUpFormModel SignUpForm { get; set; } = new();

    public async Task OnValidSubmit(EditContext editContext)
    {
        var user = new ApplicationUser
            {
                FirstName = SignUpForm.FirstName,
                LastName = SignUpForm.LastName,
                UserName = SignUpForm.Email,
                Email = SignUpForm.Email
            };

        var result = await UserManager.CreateAsync(user, SignUpForm.Password);
        if (!result.Succeeded)
        {
            StatusMessage = "Unable to create an account. Please try again.";
            return;
        }

        // await Http.PostAsJsonAsync("", SignUpForm);
        // if (UserManager.Options.SignIn.RequireConfirmedAccount)
        // {
        //     NavigationManager.NavigateTo($"/confirm?email={user.Email}");
            
        // }


    } *@
    

@*     public class SignUpFormModel
    {
        [Required]
        [Display(Name = "First name", Order = 0)]
        [MinLength(2, ErrorMessage = "You must enter a valid first name")]
        public string FirstName { get; set; } = null!;

        [Required]
        [Display(Name = "Last name", Order = 1)]
        [MinLength(2, ErrorMessage = "You must enter a valid last name")]
        public string LastName { get; set; } = null!;


        [Required]
        [EmailAddress]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email address")]
        [Display(Name = "Email", Order = 2)]
        public string Email { get; set; } = "";

        [Required]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", ErrorMessage = "Password must contain at least one lowercase letter, one uppercase letter, one digit, one special character, and be at least 8 characters long")]
        [DataType(DataType.Password)]
        [Display(Name = "Password", Order = 3)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password", Order = 4)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Display(Name = "Terms & Conditions.", Order = 5)]
        [CheckBoxRequired(ErrorMessage = "You must agree to the Terms & Conditions.")]
        public bool TermsNCondition { get; set; }
    }

} *@



@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    [SupplyParameterFromQuery]
    private string? StatusMessage { get; set; }



    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";


    public async Task RegisterUser(EditContext editContext)
    {

        var user = new ApplicationUser 
        { 
            FirstName = Input.FirstName,
            LastName = Input.LastName,
            UserName = Input.Email, 
            Email = Input.Email 
        };



        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            return;
        }


        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            NavigationManager.NavigateTo($"/confirm?email={user.Email}");
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo(ReturnUrl ?? "/");
    }


    private sealed class InputModel 
    {
        [Required]
        [Display(Name = "First name", Order = 0)]
        [MinLength(2, ErrorMessage = "You must enter a valid first name")]
        public string FirstName { get; set; } = null!;

        [Required]
        [Display(Name = "Last name", Order = 1)]
        [MinLength(2, ErrorMessage = "You must enter a valid last name")]
        public string LastName { get; set; } = null!;


        [Required]
        [EmailAddress]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email address")]
        [Display(Name = "Email", Order = 2)]
        public string Email { get; set; } = "";

        [Required]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", ErrorMessage = "Password must contain at least one lowercase letter, one uppercase letter, one digit, one special character, and be at least 8 characters long")]
        [DataType(DataType.Password)]
        [Display(Name = "Password", Order = 3)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password", Order = 4)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Display(Name = "Terms & Conditions.", Order = 5)]
        [CheckBoxRequired(ErrorMessage = "You must agree to the Terms & Conditions.")]
        public bool TermsNCondition { get; set; }

    }
}
