@page "/profile"

@using BlazorWebApp.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Net.Http.Headers

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@rendermode InteractiveServer

<h3>User Profile</h3>

@if (user != null)
{
    <div>
        <p>Username: @user.UserName</p>
        <p>Name: @user.FirstName</p>
        <img src="@user.ProfileImg" alt="Profile Picture" style="max-width: 200px;" />
    </div>

    <InputFile OnChange="HandleSelected" />
    <button @onclick="UploadProfilePicture">Change Profile Picture</button>
}
else
{
    <p>Loading...</p>
}

@code {
    private ApplicationUser user;
    private IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Identity.IsAuthenticated)
        {
            user = await UserManager.GetUserAsync(currentUser);
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
    }

    private void HandleSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task UploadProfilePicture()
    {
        if (selectedFile != null)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream());
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "file", selectedFile.Name);

            var response = await Http.PostAsync("https://fileprovider-silicon-thanakorn.azurewebsites.net/api/Upload?code=EPHb-nS8kiQvzlnHKoTHLmSNk_ts4vHfz4IUdYb5Kt5yAzFuAKFdBQ%3D%3D", content);

            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var result = System.Text.Json.JsonSerializer.Deserialize<UploadResult>(responseContent);
                    if (result != null)
                    {
                        // Use the filePath from the result for ProfileImg
                        user.ProfileImg = result.filePath;
                        var updateResult = await UserManager.UpdateAsync(user);
                        if (updateResult.Succeeded)
                        {
                            StateHasChanged();
                        }
                        else
                        {
                            Console.WriteLine("Failed to update user profile image.");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Deserialized result is null.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Deserialization exception: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("Failed to upload file.");
            }
        }
    }

    private class UploadResult
    {
        public string fileName { get; set; }
        public string filePath { get; set; }
    }
}
