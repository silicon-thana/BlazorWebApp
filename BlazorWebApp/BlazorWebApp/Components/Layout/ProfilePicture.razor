@* @using BlazorWebApp.Data
@using Microsoft.AspNetCore.Identity
@inject HttpClient Http
@inject UserManager<ApplicationUser> UserManager


<section class="account-profile">
    <div class="profile">
        <div class="profile-image">
            <img src="/images/uploads/profiles/@user.ProfileImg" alt="@user.FirstName @user.LastName" />
            <EditForm Model="@uploadModel" OnValidSubmit="HandleProfileUpload">
                <InputFile id="fileUploader" OnChange="HandleFileSelected" />
                <Label for="fileUploader" class="btn btn-circle btn-sm">
                    <i class="fa-regular fa-refresh"></i>
                </Label>
            </EditForm>
        </div>
        <div class="profile-info">
            <h3 class="displayname">@user.FirstName @user.LastName</h3>
            <p>@user.Email</p>
        </div>
    </div>
</section>



@code {
    private ApplicationUser user = default!;
    private IBrowserFile selectedFile;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task HandleProfileUpload()
    {
        if (selectedFile == null)
        {
            // Display an error message
            return;
        }

        try
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10)); // Set max allowed size to 10MB
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "file", selectedFile.Name);

            var response = await Http.PostAsync("https://fileprovider-silicon-thanakorn.azurewebsites.net/api/Upload?code=EPHb-nS8kiQvzlnHKoTHLmSNk_ts4vHfz4IUdYb5Kt5yAzFuAKFdBQ%3D%3D", content);

            if (response.IsSuccessStatusCode)
            {
                var fileUrl = await response.Content.ReadAsStringAsync();
                if (user != null)
                {
                    user.ProfileImg = fileUrl;

                    var updateResult = await UserManager.UpdateAsync(user);
                    if (updateResult.Succeeded)
                    {
                        // Refresh the user information
                        await RefreshUserData();
                        StateHasChanged();
                    }
                    else
                    {
                        // Log the error
                        Console.WriteLine("Failed to update user profile image.");
                    }
                }
            }
            else
            {
                // Log the response for further analysis
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error uploading file: {response.StatusCode}, {errorContent}");
            }
        }
        catch (Exception ex)
        {
            // Handle the exception (e.g., display a message)
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
    }

    private async Task RefreshUserData()
    {
        // Assuming you have a method to fetch the updated user data
        var updatedUser = await UserManager.FindByIdAsync(user.Id);
        if (updatedUser != null)
        {
            user = updatedUser;
        }
    }
}
 *@