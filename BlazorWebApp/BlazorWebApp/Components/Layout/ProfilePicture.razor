@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data
@using System.Net.Http.Headers
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject IConfiguration Configuration
@rendermode InteractiveServer

<div class="profile-image">
    <img src="@User?.ProfileImg" alt="@User?.UserName" />
    <InputFile OnChange="HandleSelected" />
    <i class="fa-sharp fa-regular fa-arrows-rotate"></i>
    <h3>@User?.FirstName @User?.LastName</h3>
    <p>@User?.Email</p>
</div>

@code {
    [Parameter]
    public ApplicationUser? User { get; set; }
    private IBrowserFile selectedFile;

    private async void HandleSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        await UploadProfilePicture();
    }

    private async Task UploadProfilePicture()
    {
        if (selectedFile != null)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream());
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "file", selectedFile.Name);

            var response = await Http.PostAsync(Configuration["FileUpload"], content);

            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var result = System.Text.Json.JsonSerializer.Deserialize<UploadResult>(responseContent);
                    if (result != null)
                    {
                        // Use the filePath from the result for ProfileImg
                        User.ProfileImg = result.filePath;
                        var updateResult = await UserManager.UpdateAsync(User);
                        if (updateResult.Succeeded)
                        {
                            StateHasChanged();
                        }
                        else
                        {
                            Console.WriteLine("Failed to update user profile image.");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Deserialized result is null.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Deserialization exception: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("Failed to upload file.");
            }
        }
    }

    private class UploadResult
    {
        public string fileName { get; set; } = null!;
        public string filePath { get; set; } = null!;
    }
}
